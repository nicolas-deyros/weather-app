---
import '@styles/global.css'

import Location from '@components/page/Location.astro'
import LocationSearch from '@components/page/LocationSearch.astro'
import { Icon } from 'astro-icon/components'

// Get parameters from the URL
const lat = Astro.url.searchParams.get('lat')
const lon = Astro.url.searchParams.get('lon')

// Fetch weather data - only during SSR if we have explicit coordinates
let weatherData = null
let error = null

// Only fetch during SSR if we have explicit lat/lon parameters (not default)
if (lat && lon) {
	try {
		const apiUrl = new URL('/api/weather.json', Astro.url.origin)
		apiUrl.searchParams.set('lat', lat)
		apiUrl.searchParams.set('lon', lon)

		const response = await fetch(apiUrl.href)

		if (response.ok) {
			const responseText = await response.text()
			try {
				weatherData = JSON.parse(responseText)
			} catch (parseError) {
				console.error('Failed to parse weather response:', parseError)
				console.error('Response text:', responseText)
				error = `Invalid response format: ${parseError instanceof Error ? parseError.message : 'JSON parse error'}`
			}
		} else {
			// Try to get error details from response
			try {
				const errorData = await response.json()
				error = `API Error (${response.status}): ${errorData.message || errorData.error || 'Unknown error'}`
			} catch {
				error = `API Error: HTTP ${response.status} ${response.statusText}`
			}
		}
	} catch (e) {
		console.error('Weather fetch error:', e)
		error = `Network Error: ${e instanceof Error ? e.message : 'Connection failed'}`
	}
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<!-- Animated SVG favicon for modern browsers -->
		<link rel="icon" type="image/svg+xml" href="/favicon-animated.svg" />
		<!-- Add these meta tags for better favicon support -->
		<link rel="apple-touch-icon" sizes="180x180" href="/favicon-animated.svg" />
		<link rel="manifest" href="/site.webmanifest" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Weather App</title>
	</head>
	<body
		class="min-h-screen bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500">
		<div class="container mx-auto px-4 py-8">
			<!-- Header -->
			<div class="mb-8 text-center">
				<h1
					class="mb-2 flex items-center-safe justify-center-safe text-5xl font-bold text-white">
					Weather <Icon name="meteocons:horizon-fill" class="h-24 w-24" /> App
				</h1>
				<p class="text-white/80">Real-time weather data from Open-Meteo API</p>
			</div>

			<!-- Desktop: Two-column layout, Mobile: Single column -->
			<div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
				<!-- Left Column: Search and Location Buttons -->
				<div class="space-y-8">
					<!-- Location Search Component -->
					<div class="mx-auto max-w-lg lg:mx-0 lg:max-w-none">
						<LocationSearch />
					</div>

					<!-- Quick Location Test Buttons -->
					<div class="mx-auto max-w-lg lg:mx-0 lg:max-w-none">
						<Location />
					</div>
				</div>

				<!-- Right Column: Weather Display -->
				<div class="weather-container">
					{
						error ? (
							<div class="mx-auto mb-8 max-w-lg rounded-xl bg-red-500/20 p-6 text-center backdrop-blur-md lg:mx-0 lg:max-w-none">
								<div class="mb-4 text-6xl">‚ö†Ô∏è</div>
								<h2 class="mb-2 text-xl font-bold text-white">
									Error Loading Weather
								</h2>
								<p class="text-red-100">{error}</p>
								<p class="mt-2 text-sm text-red-200">
									Try refreshing the page or selecting a different location.
								</p>
							</div>
						) : weatherData ? (
							<div class="mx-auto mb-8 max-w-lg rounded-xl bg-white/20 p-8 shadow-xl backdrop-blur-md lg:mx-0 lg:max-w-none">
								<div class="mb-6 text-center">
									<h2 class="mb-2 text-3xl font-bold text-white">
										üìç {weatherData.location.city}
									</h2>
									<p class="text-sm text-white/80">
										{weatherData.location.latitude.toFixed(4)}¬∞,{' '}
										{weatherData.location.longitude.toFixed(4)}¬∞
									</p>
								</div>

								<div class="mb-6 flex justify-center">
									<label
										id="temp-toggle"
										for="temp-toggle-checkbox"
										class="relative inline-flex cursor-pointer items-center">
										<input
											type="checkbox"
											value=""
											id="temp-toggle-checkbox"
											class="peer sr-only"
										/>
										<div class="peer relative h-10 w-20 rounded-full border border-white/30 bg-white/20 backdrop-blur-sm peer-checked:bg-white/30 peer-focus:ring-4 peer-focus:ring-white/20 peer-focus:outline-none before:absolute before:top-[4px] before:left-[4px] before:flex before:h-8 before:w-8 before:items-center before:justify-center before:rounded-full before:border before:border-white/40 before:bg-white/90 before:text-sm before:font-semibold before:text-blue-600 before:shadow-lg before:transition-all before:duration-300 before:content-['¬∞C'] peer-checked:before:translate-x-10 peer-checked:before:opacity-0 after:absolute after:top-[4px] after:left-[4px] after:flex after:h-8 after:w-8 after:items-center after:justify-center after:rounded-full after:border after:border-white/40 after:bg-white/90 after:text-sm after:font-semibold after:text-orange-600 after:opacity-0 after:shadow-lg after:transition-all after:duration-300 after:content-['¬∞F'] peer-checked:after:translate-x-10 peer-checked:after:opacity-100" />
									</label>
								</div>

								<div class="mb-8 text-center">
									<div class="mb-6 flex justify-center">
										<Icon
											name={weatherData.current.icon}
											class="h-32 w-32 text-white drop-shadow-lg"
										/>
									</div>
									<div
										class="mb-2 text-7xl font-bold text-white drop-shadow-md"
										id="currentTemp"
										data-temp-c={weatherData.current.temperature}>
										{weatherData.current.temperature}¬∞C
									</div>
									<div class="text-2xl font-medium text-white/90">
										{weatherData.current.description}
									</div>
									<div class="mt-3 text-sm text-white/70">
										Updated:{' '}
										{new Date(weatherData.current.time).toLocaleString()}
									</div>
								</div>

								<div>
									<h3 class="mb-6 text-center text-xl font-semibold text-white">
										Next 3 Days
									</h3>
									<div class="grid grid-cols-3 gap-3" id="dailyForecast">
										{/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}
										{weatherData.daily.map((day: any) => (
											<div class="rounded-lg bg-white/10 p-4 text-center">
												<div class="mb-3 text-xs font-medium text-white/70">
													{day.day}
												</div>
												<div class="mb-3 flex justify-center">
													<Icon name={day.icon} class="h-10 w-10 text-white" />
												</div>
												<div class="daily-temp text-lg font-bold text-white">
													<div class="text-white" data-temp-c={day.maxTemp}>
														{day.maxTemp}¬∞C
													</div>
													<div
														class="text-sm text-white/70"
														data-temp-c={day.minTemp}>
														{day.minTemp}¬∞C
													</div>
												</div>
												<div class="mt-1 text-xs text-white/60">
													{day.description}
												</div>
											</div>
										))}
									</div>
								</div>
							</div>
						) : (
							<div class="mx-auto mb-8 max-w-lg rounded-xl bg-white/20 p-8 text-center backdrop-blur-md lg:mx-0">
								<div class="mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-4 border-white border-t-transparent" />
								<p class="text-lg text-white">Loading weather data...</p>
								<p class="mt-2 text-sm text-white/70">
									Fetching current conditions
								</p>
							</div>
						)
					}
				</div>
			</div>
		</div>

		<script>
			// TypeScript interfaces

			interface DailyWeatherData {
				date: string
				day: string
				icon: string
				maxTemp: number
				minTemp: number
				description: string
			}

			interface WeatherLocation {
				city: string
				latitude: number
				longitude: number
			}

			interface CurrentWeatherData {
				icon: string
				temperature: number
				description: string
				time: string | number | Date
				weatherCode: number
			}

			interface WeatherData {
				daily: DailyWeatherData[]
				location: WeatherLocation
				current: CurrentWeatherData
			}

			// TypeScript: declare AstroIcon on window
			declare global {
				interface Window {
					loadWeather: (
						lat: number,
						lon: number,
						cityName: string,
					) => Promise<void>
					loadWeatherFromInputs: () => void
					switchToUnit: (unit: string) => void
				}
			}

			// Global function to switch temperature units
			window.switchToUnit = function (unit: string) {
				try {
					// console.log(`Switching to ${unit} units`)

					// Update toggle state
					const toggleCheckbox = document.getElementById(
						'temp-toggle-checkbox',
					) as HTMLInputElement
					if (toggleCheckbox) {
						// Celsius is unchecked (false), Fahrenheit is checked (true)
						toggleCheckbox.checked = unit === 'fahrenheit'
					}

					// Convert current temperature
					const currentTempElement = document.getElementById('currentTemp')
					if (currentTempElement) {
						const celsiusTemp = parseFloat(
							currentTempElement.getAttribute('data-temp-c') || '0',
						)
						if (!isNaN(celsiusTemp)) {
							if (unit === 'celsius') {
								currentTempElement.textContent = `${celsiusTemp}¬∞C`
							} else {
								const fahrenheitTemp = Math.round((celsiusTemp * 9) / 5 + 32)
								currentTempElement.textContent = `${fahrenheitTemp}¬∞F`
							}
						}
					}

					// Convert daily forecast temperatures
					const dailyTemps = document.querySelectorAll(
						'.daily-temp [data-temp-c]',
					)
					dailyTemps.forEach(tempElement => {
						const celsiusTemp = parseFloat(
							(tempElement as HTMLElement).getAttribute('data-temp-c') || '0',
						)
						if (!isNaN(celsiusTemp)) {
							if (unit === 'celsius') {
								tempElement.textContent = `${celsiusTemp}¬∞C`
							} else {
								const fahrenheitTemp = Math.round((celsiusTemp * 9) / 5 + 32)
								tempElement.textContent = `${fahrenheitTemp}¬∞F`
							}
						}
					})

					// Store user preference
					localStorage.setItem('temperatureUnit', unit)
				} catch (error) {
					console.error('Error switching temperature unit:', error)
				}
			}

			// Add visual feedback for link clicks
			document.addEventListener('DOMContentLoaded', function () {
				// Load default London weather if no coordinates are in URL and no weather data from SSR
				const urlParams = new URLSearchParams(window.location.search)
				const hasCoords = urlParams.has('lat') && urlParams.has('lon')
				const hasWeatherData = document
					.querySelector('.weather-container')
					?.innerHTML.includes('üìç')

				if (!hasCoords && !hasWeatherData) {
					// Load default London weather
					window.loadWeather(51.5074, -0.1278, 'London')
				}

				// Initialize temperature unit based on user preference
				const savedUnit = localStorage.getItem('temperatureUnit') || 'celsius'
				if (window.switchToUnit) {
					window.switchToUnit(savedUnit)
				}

				// Add event listener for temperature toggle
				const tempToggle = document.getElementById(
					'temp-toggle-checkbox',
				) as HTMLInputElement
				if (tempToggle) {
					tempToggle.addEventListener('change', function () {
						const unit = this.checked ? 'fahrenheit' : 'celsius'
						if (window.switchToUnit) {
							window.switchToUnit(unit)
						}
					})
				}

				const locationButtons = document.querySelectorAll('button[id^="loc-"]')
				locationButtons.forEach(button => {
					button.addEventListener('click', function (event) {
						const target = event.currentTarget as HTMLElement
						const lat = target.dataset.lat
						const lon = target.dataset.lon
						const city = target.dataset.city

						if (lat && lon && city) {
							window.loadWeather(parseFloat(lat), parseFloat(lon), city)
						}
					})
				})

				const links = document.querySelectorAll('a[href*="lat="]')
				links.forEach(link => {
					link.addEventListener('click', function (event) {
						const target = event.currentTarget as HTMLElement
						target.style.transform = 'scale(0.95)'
						target.style.opacity = '0.7'

						// Show loading indicator
						const loading = document.createElement('div')
						loading.style.cssText = `
              position: fixed;
              top: 20px;
              right: 20px;
              background: rgba(59, 130, 246, 0.9);
              color: white;
              padding: 12px 20px;
              border-radius: 8px;
              font-weight: bold;
              z-index: 1000;
              backdrop-filter: blur(10px);
            `
						loading.textContent = 'üåç Loading weather...'
						document.body.appendChild(loading)
					})
				})
			})

			// Function to load weather data for a specific location (global)
			window.loadWeather = async function (
				lat: number,
				lon: number,
				cityName: string,
			) {
				try {
					// Show loading state
					const weatherContainer = document.querySelector('.weather-container')
					if (weatherContainer) {
						weatherContainer.innerHTML = `
              <div class="max-w-lg mx-auto bg-white/20 backdrop-blur-md rounded-xl p-8 text-center mb-8">
                <div class="animate-spin w-12 h-12 border-4 border-white border-t-transparent rounded-full mx-auto mb-4"></div>
                <p class="text-white text-lg">Loading ${cityName} weather...</p>
                <p class="text-white/70 text-sm mt-2">Fetching current conditions</p>
              </div>
            `
					}

					// Update current location display
					const currentCityElem = document.getElementById('currentCity')
					if (currentCityElem) {
						currentCityElem.textContent = `Loading ${cityName}...`
					}
					const currentCoordsElem = document.getElementById('currentCoords')
					if (currentCoordsElem) {
						currentCoordsElem.textContent = `${lat}, ${lon}`
					}

					// Fetch weather data with timeout
					const controller = new AbortController()
					const timeoutId = setTimeout(() => controller.abort(), 15000) // 15 second timeout

					const response = await fetch(
						`/api/weather.json?lat=${lat}&lon=${lon}`,
						{
							signal: controller.signal,
							headers: {
								Accept: 'application/json',
								'Content-Type': 'application/json',
							},
						},
					)
					clearTimeout(timeoutId)

					// Check if response is actually JSON
					const contentType = response.headers.get('content-type')
					if (!contentType || !contentType.includes('application/json')) {
						const responseText = await response.text()
						console.error('Non-JSON response:', responseText)
						throw new Error(
							`Server returned ${contentType || 'unknown content type'} instead of JSON`,
						)
					}

					const responseText = await response.text()
					let weatherData

					try {
						weatherData = JSON.parse(responseText)
					} catch (parseError) {
						console.error('JSON parse error:', parseError)
						console.error('Response text:', responseText)
						throw new Error(
							`Invalid JSON response: ${parseError instanceof Error ? parseError.message : 'Parse error'}`,
						)
					}

					if (response.ok && weatherData && !weatherData.error) {
						updateWeatherDisplay(weatherData)
						const currentCityElem = document.getElementById('currentCity')
						if (currentCityElem) {
							currentCityElem.textContent =
								weatherData.location?.city || cityName
						}
					} else {
						// Handle error response - ensure we get a readable message
						let errorMessage = 'Unknown error'

						if (weatherData?.message) {
							errorMessage =
								typeof weatherData.message === 'string'
									? weatherData.message
									: JSON.stringify(weatherData.message)
						} else if (weatherData?.error) {
							errorMessage =
								typeof weatherData.error === 'string'
									? weatherData.error
									: JSON.stringify(weatherData.error)
						} else {
							errorMessage = `HTTP ${response.status} - ${response.statusText}`
						}

						console.error('API error:', errorMessage)
						console.error('Full error response:', weatherData)
						showError(`Failed to load weather data: ${errorMessage}`)
					}
				} catch (error) {
					console.error('Weather load error:', error)

					if (error instanceof Error) {
						if (error.name === 'AbortError') {
							showError('Request timeout - please try again')
						} else {
							showError(`Network error: ${error.message}`)
						}
					} else {
						showError(`Unexpected error: ${String(error)}`)
					}
				}
			}

			// Function to load weather from manual inputs (global)
			window.loadWeatherFromInputs = function () {
				const latInput = document.getElementById(
					'manualLat',
				) as HTMLInputElement | null
				const lonInput = document.getElementById(
					'manualLon',
				) as HTMLInputElement | null
				const lat = latInput?.value
				const lon = lonInput?.value

				if (!lat || !lon) {
					alert('Please enter both latitude and longitude')
					return
				}

				window.loadWeather(parseFloat(lat), parseFloat(lon), 'Custom Location')
			}

			// Function to create animated emoji weather icons
			function createWeatherIcon(
				iconName: string,
				isLarge: boolean = false,
			): string {
				// Debug logging to see what icons we're getting
				// console.log(`Creating weather icon for: ${iconName}`)

				const sizeClass = isLarge ? 'text-8xl' : 'text-4xl'
				let emoji = '‚òÅÔ∏è'
				let animationClass = ''

				switch (iconName) {
					case 'meteocons:clear-day-fill':
						emoji = '‚òÄÔ∏è'
						animationClass = 'animate-bounce'
						break
					case 'meteocons:clear-night-fill':
						emoji = 'üåô'
						animationClass = 'animate-pulse'
						break
					case 'meteocons:partly-cloudy-day-fill':
						emoji = '‚õÖ'
						animationClass = 'animate-partly-cloudy'
						break
					case 'meteocons:partly-cloudy-night-fill':
						emoji = 'üåô'
						animationClass = 'animate-partly-cloudy-slow'
						break
					case 'meteocons:cloudy-fill':
					case 'meteocons:overcast-fill':
						emoji = '‚òÅÔ∏è'
						animationClass = 'animate-pulse'
						break
					case 'meteocons:rain-fill':
						emoji = 'üåßÔ∏è'
						animationClass = 'animate-rain-drop'
						break
					case 'meteocons:drizzle-fill':
						emoji = 'üå¶Ô∏è'
						animationClass = 'animate-rain-drop'
						break
					case 'meteocons:thunderstorms-fill':
						emoji = '‚õàÔ∏è'
						animationClass = 'animate-thunder-pulse'
						break
					case 'meteocons:thunderstorms-rain-fill':
					case 'meteocons:thunderstorms-day-rain-fill':
					case 'meteocons:thunderstorms-night-rain-fill':
						// These icons may not exist, fallback to regular thunderstorms
						emoji = '‚õàÔ∏è'
						animationClass = 'animate-thunder-pulse'
						break
					case 'meteocons:snow-fill':
						emoji = 'üå®Ô∏è'
						animationClass = 'animate-snow-float'
						break
					case 'meteocons:sleet-fill':
						emoji = 'üå®Ô∏è'
						animationClass = 'animate-snow-fast'
						break
					case 'meteocons:hail-fill':
						emoji = 'üå®Ô∏è'
						animationClass = 'animate-hail-bounce'
						break
					case 'meteocons:fog-fill':
						emoji = 'üå´Ô∏è'
						animationClass = 'animate-fog-swirl'
						break
					case 'meteocons:wind-fill':
						emoji = 'üí®'
						animationClass = 'animate-wind-sway'
						break
					case 'meteocons:tornado-fill':
						emoji = 'üå™Ô∏è'
						animationClass = 'animate-spin'
						break
					// Additional meteocons icons that might be returned by the API
					case 'meteocons:partly-cloudy-fill':
						emoji = '‚õÖ'
						animationClass = 'animate-partly-cloudy'
						break
					case 'meteocons:overcast-day-fill':
					case 'meteocons:overcast-night-fill':
						emoji = '‚òÅÔ∏è'
						animationClass = 'animate-pulse'
						break
					case 'meteocons:rain-heavy-fill':
						emoji = 'üåßÔ∏è'
						animationClass = 'animate-rain-drop'
						break
					case 'meteocons:thunderstorms-day-fill':
					case 'meteocons:thunderstorms-night-fill':
						emoji = '‚õàÔ∏è'
						animationClass = 'animate-thunder-pulse'
						break
					case 'meteocons:snow-heavy-fill':
						emoji = 'üå®Ô∏è'
						animationClass = 'animate-snow-float'
						break
					case 'meteocons:fog-day-fill':
					case 'meteocons:fog-night-fill':
						emoji = 'üå´Ô∏è'
						animationClass = 'animate-fog-swirl'
						break
					case 'meteocons:mist-fill':
						emoji = 'üå´Ô∏è'
						animationClass = 'animate-fog-swirl'
						break
					case 'meteocons:dust-fill':
						emoji = 'üå´Ô∏è'
						animationClass = 'animate-fog-swirl'
						break
					case 'meteocons:smoke-fill':
						emoji = 'üå´Ô∏è'
						animationClass = 'animate-fog-swirl'
						break
					case 'meteocons:haze-fill':
						emoji = 'üå´Ô∏è'
						animationClass = 'animate-fog-swirl'
						break
					case 'meteocons:extreme-fill':
						emoji = 'üå™Ô∏è'
						animationClass = 'animate-spin'
						break
					case 'meteocons:hurricane-fill':
						emoji = 'üåÄ'
						animationClass = 'animate-spin'
						break
					case 'meteocons:windy-fill':
					case 'meteocons:wind-strong-fill':
						emoji = 'üí®'
						animationClass = 'animate-wind-sway'
						break
					// Handle any icon name that contains common weather patterns
					default:
						// Smart fallback based on icon name patterns
						if (iconName.includes('clear') && iconName.includes('day')) {
							emoji = '‚òÄÔ∏è'
							animationClass = 'animate-bounce'
						} else if (
							iconName.includes('clear') &&
							iconName.includes('night')
						) {
							emoji = 'üåô'
							animationClass = 'animate-pulse'
						} else if (
							iconName.includes('partly-cloudy') ||
							iconName.includes('partial')
						) {
							emoji = '‚õÖ'
							animationClass = 'animate-partly-cloudy'
						} else if (
							iconName.includes('rain') ||
							iconName.includes('drizzle')
						) {
							emoji = 'üåßÔ∏è'
							animationClass = 'animate-rain-drop'
						} else if (
							iconName.includes('thunder') ||
							iconName.includes('storm')
						) {
							emoji = '‚õàÔ∏è'
							animationClass = 'animate-thunder-pulse'
						} else if (iconName.includes('snow')) {
							emoji = 'üå®Ô∏è'
							animationClass = 'animate-snow-float'
						} else if (
							iconName.includes('sleet') ||
							iconName.includes('hail')
						) {
							emoji = 'üå®Ô∏è'
							animationClass = 'animate-hail-bounce'
						} else if (
							iconName.includes('fog') ||
							iconName.includes('mist') ||
							iconName.includes('haze')
						) {
							emoji = 'üå´Ô∏è'
							animationClass = 'animate-fog-swirl'
						} else if (iconName.includes('wind')) {
							emoji = 'üí®'
							animationClass = 'animate-wind-sway'
						} else if (
							iconName.includes('tornado') ||
							iconName.includes('hurricane') ||
							iconName.includes('extreme')
						) {
							emoji = 'üå™Ô∏è'
							animationClass = 'animate-spin'
						} else if (
							iconName.includes('cloudy') ||
							iconName.includes('overcast')
						) {
							emoji = '‚òÅÔ∏è'
							animationClass = 'animate-pulse'
						} else {
							// Ultimate fallback
							emoji = '‚òÅÔ∏è'
							animationClass = 'animate-pulse'
							console.warn(
								`Unknown weather icon: ${iconName}, using default fallback`,
							)
						}
						break
				}

				return `<span class="${sizeClass} ${animationClass} inline-block hover:scale-110 transition-all duration-300 cursor-pointer" title="${iconName}">${emoji}</span>`
			}

			// Function to update the weather display
			function updateWeatherDisplay(weatherData: WeatherData) {
				const weatherContainer = document.querySelector('.weather-container')
				if (!weatherContainer) return

				const dailyHtml = weatherData.daily
					.slice(0, 3)
					.map(
						(day: DailyWeatherData) => `
            <div class="rounded-lg bg-white/10 p-4 text-center">
              <div class="mb-3 text-xs font-medium text-white/70">
                ${day.day}
              </div>
              <div class="mb-3 flex justify-center">
                ${createWeatherIcon(day.icon)}
              </div>
              <div class="daily-temp text-lg font-bold text-white">
                <div class="text-white" data-temp-c="${day.maxTemp}">
                  ${day.maxTemp}¬∞C
                </div>
                <div class="text-sm text-white/70" data-temp-c="${day.minTemp}">
                  ${day.minTemp}¬∞C
                </div>
              </div>
              <div class="mt-1 text-xs text-white/60">
                ${day.description}
              </div>
            </div>
          `,
					)
					.join('')

				weatherContainer.innerHTML = `
          <div class="mx-auto mb-8 max-w-lg rounded-xl bg-white/20 p-8 shadow-xl backdrop-blur-md lg:mx-0 lg:max-w-none">
            
            <div class="mb-6 text-center">
              <h2 class="mb-2 text-3xl font-bold text-white">
                üìç ${weatherData.location.city}
              </h2>
              <p class="text-sm text-white/80">
                ${weatherData.location.latitude.toFixed(4)}¬∞, ${weatherData.location.longitude.toFixed(4)}¬∞
              </p>
            </div>

            
            <div class="mb-6 flex justify-center">
              <label
                id="temp-toggle"
                for="temp-toggle-checkbox"
                class="relative inline-flex cursor-pointer items-center">
                <input
                  type="checkbox"
                  value=""
                  id="temp-toggle-checkbox"
                  class="peer sr-only"
                />
                <div class="peer relative h-10 w-20 rounded-full border border-white/30 bg-white/20 backdrop-blur-sm peer-checked:bg-white/30 peer-focus:ring-4 peer-focus:ring-white/20 peer-focus:outline-none before:absolute before:top-[4px] before:left-[4px] before:flex before:h-8 before:w-8 before:items-center before:justify-center before:rounded-full before:border before:border-white/40 before:bg-white/90 before:text-sm before:font-semibold before:text-blue-600 before:shadow-lg before:transition-all before:duration-300 before:content-['¬∞C'] peer-checked:before:translate-x-10 peer-checked:before:opacity-0 after:absolute after:top-[4px] after:left-[4px] after:flex after:h-8 after:w-8 after:items-center after:justify-center after:rounded-full after:border after:border-white/40 after:bg-white/90 after:text-sm after:font-semibold after:text-orange-600 after:opacity-0 after:shadow-lg after:transition-all after:duration-300 after:content-['¬∞F'] peer-checked:after:translate-x-10 peer-checked:after:opacity-100"></div>
              </label>
            </div>

            
            <div class="mb-8 text-center">
              <div class="mb-6 flex justify-center">
                ${createWeatherIcon(weatherData.current.icon, true)}
              </div>
              <div class="mb-2 text-7xl font-bold text-white drop-shadow-md" id="currentTemp" data-temp-c="${weatherData.current.temperature}">
                ${weatherData.current.temperature}¬∞C
              </div>
              <div class="text-2xl font-medium text-white/90">
                ${weatherData.current.description}
              </div>
              <div class="mt-3 text-sm text-white/70">
                Updated: ${new Date(weatherData.current.time).toLocaleString()}
              </div>
            </div>

            
            <div>
              <h3 class="mb-6 text-center text-xl font-semibold text-white">Next 3 Days</h3>
              <div class="grid grid-cols-3 gap-3" id="dailyForecast">
                ${dailyHtml}
              </div>
            </div>
          </div>
        `

				// Apply current temperature unit preference
				const savedUnit = localStorage.getItem('temperatureUnit') || 'celsius'
				if (window.switchToUnit) {
					window.switchToUnit(savedUnit)
				}

				// Re-attach event listener for the new toggle
				const tempToggle = document.getElementById(
					'temp-toggle-checkbox',
				) as HTMLInputElement
				if (tempToggle) {
					tempToggle.addEventListener('change', function () {
						const unit = this.checked ? 'fahrenheit' : 'celsius'
						if (window.switchToUnit) {
							window.switchToUnit(unit)
						}
					})
				}
			}

			// Function to show error messages
			function showError(message: string) {
				const weatherContainer = document.querySelector('.weather-container')
				if (!weatherContainer) return

				weatherContainer.innerHTML = `
          <div class="max-w-lg mx-auto bg-red-500/20 backdrop-blur-md rounded-xl p-6 text-center mb-8">
            <div class="text-6xl mb-4">‚ö†Ô∏è</div>
            <h2 class="text-xl font-bold text-white mb-2">Error Loading Weather</h2>
            <p class="text-red-100">${message}</p>
            <p class="text-red-200 text-sm mt-2">Try selecting a different location.</p>
          </div>
        `
			}
		</script>
	</body>
</html>
